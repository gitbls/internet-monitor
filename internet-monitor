#!/bin/bash
#
# V1.9
#
# Monitors internet connectivity
# Logs internet up and down events, and reports outage duration
#
# See internet-monitor.service for details on running as a service
#
function errexit() {
    echo "$1"
    exit
}

function logmsg() {
    #
    # $1: Date/time for logging to console
    # $2: Message
    #
    dtim="$1"
    msg="$2"
    [ $syslog -eq 0 ] && logger "Internet-Monitor $msg" || echo "$dtim $msg"
}

function fmtdate() {
    #
    # Format date for printing
    # $1: Date in canonical format
    #
    echo "$(date -d $1 "$dtfmt")"
}

function getcdate() {
    #
    # Returns date in canonical format
    #
    echo $(date "$cdtfmt")
}

function fmtcdate() {
    #
    # Formats canonical date for printing
    #
    echo $(fmtdate $(getcdate))
}

function datediff() {
    #
    # Computes difference between two dates
    # returns it as a string of Days:Hours:Minutes:Seconds
    #
    local days hours minutes seconds eseconds
    local btime=$1 etime=$2
    eseconds=$(($(/bin/date -d $etime +%s) - $(/bin/date -d $btime +%s)))
    days=$(($eseconds/86400))
    hours=$((($eseconds - $(($days*86400)))/3600))
    minutes=$((($eseconds - $(($days*86400)) - $(($hours*3600)))/60))
    seconds=$(($eseconds - $(($days*86400)) - $(($hours*3600)) - $(($minutes*60))))
    echo "$days:$hours:$minutes:$seconds"
}

function getiplist() {
    #
    # Returns the list of IP addresses to ping
    #
    local iplist=$1
    allips=""
    if [ "${iplist:0:1}" == "@" ]
    then
	fn="${iplist:1:999}"
	if [ -f "$fn" ]
	then
	    while read line
	    do
	    #
	    # Strip trailing spaces, tabs, and comments
	    #
            newip="${line%%\#*}"    # Del EOL comments
            newip="${newip%"${newip##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    [ "$newip" != "" ] && allips="$allips $newip"
	    done < $fn
	else
	    echo "? File '$fn' not found"
	    return
	fi
    else
	IFS="," read -r -a ips <<<$iplist
	for ip in ${ips[@]}
	do
	    allips="$allips $ip"
	done
    fi
    echo "$allips"
}    

function online() {
    #
    # Test if IP address $1 is online
    # Returns 0 if online, 1 if offline
    #
    local pcnt=1
    if (ping -c $pcnt -W $pingwait $1 > /dev/null 2>&1 )
    then
	return 0
    else
	return 1
    fi
}

function ckmonitoredips() {
    #
    # Check monitored IPs (not Internet IP) and report status
    # $1: Monitored IP list
    # $2: "starting " or ""
    # $3: 0 if Internet online, 1 if offline
    #
    local iplist="$1" initial=$2 inetstate=$3
    local pl
    read -r -a pl <<<"$iplist"
    if [ -n pl[@] ]
    then
	for ip in ${pl[@]}
	do
	    # Only report monitored IP offline if Internet offline
	    if [ $inetstate -eq 1 ]
	    then
		online $ip && state="online" || state="offline"
		[ "$state" == "offline" ] && logmsg "$(fmtdate $(getcdate))" "Monitored Other    IP $ip ${initial}$state"
	    fi
	done
    fi
}

function reportonline() {
    #
    # Report Internet IP status as online and test monitored IPs
    #
    dateon=$(getcdate)
    printmsg="onlineprint"
    [ -n "$actscript" ] && printmsg=$($actscript online "$dateon" $syslog "$ddiff")
    case "${printmsg,,}" in
	online*)
	    if [ "${printmsg,,}" == "onlineprint" ]
	    then
	       logmsg "$(fmtdate $dateon)" "Monitored Internet IP $xip online"
	       [ "$dateoff" != "" ] && ddiff=$(datediff $dateoff $dateon) || ddiff=""
	       IFS=":" read -r -a edate <<<$ddiff
	       [ "$ddiff" != "" ] && logmsg "$(fmtcdate)" "Outage Duration: ${edate[0]} days ${edate[1]} hours ${edate[2]} minutes ${edate[3]} seconds"
	    fi
	    ckmonitoredips "${pinglist[*]}" "" 0
	    pstate=0 ; curttw=$dttw
	    ;;
	*)
	    ;;
	esac
}

function reportoffline() {
    #
    # Report Internet IP status as offline and test monitored IPs
    #
    # $1: "starting " or ""
    #
    dateoff=$(getcdate)
    printmsg="offlineprint"
    [ -n "$actscript" ] && printmsg=$($actscript offline "$dateoff" $syslog)
    case "${printmsg,,}" in
	offline*)
	    ckmonitoredips "${pinglist[*]}" "$1" 1
	    pstate=1 ; curttw=1
	    [ "${printmsg,,}" == "offlineprint" ] && logmsg "$(fmtdate $dateoff)"  "Monitored Internet IP $xip ${1}offline"
	    ;;
	*)
	    ;;
    esac
}

function getextip() {
    local extip providers=( 
	"ifconfig.co/" \
	"whatismyip.akamai.com/" \
	"dynupdate.no-ip.com/ip.php" \
	)
#	"icanhazip.com/" 
#	"ident.me/" 
#	"l2.io/ip" 
#	"bot.whatismyipaddress.com/" 
#	"ifconfig.me/" 
#	"wgetip.com/" 
#	"zzipinfo.io/ip[curl]" 

    for purl in ${providers[@]}
    do
	url="${purl%%\[*\]}"
	getop="${purl##$url}"    # Get the [op] part
	[ "$getop" == "" ] && getop="[curl]"
	if [ "$getop" == "[curl]" ]
	then
	    extip=$(curl -s $url)
	    [ "$extip" != "" ] && echo "$extip" && return
# Add other methods like this
#	elif [ "$getop" == "[foo]" ]
#	then
#           extip=$(command to get IP address)
#	    [ "$extip" != "" ] && echo "$extip" && return
	fi
    done
    echo "unknown"
    return
}

function checkextip() {
    local newextip=$(getextip)
    if [ "$newextip" == "" ]
    then
	logmsg "$(fmtcdate)" "%% Unable to obtain External IP Address"
	$actscript "noupdate" "" $myextip
    fi
    if [ "$newextip" != "" -a "$newextip" != "$myextip" ]
    then
	logmsg "$(fmtcdate)" "External IP Address changed from $myextip to $newextip"
	$actscript "update" $newextip $myextip
	myextip=$newextip
    fi
}

checkactioncomm() {
    local cmd
    resetf="/tmp/internet-monitor-cmd"
    [ -f $resetf ] && cmd=$(cat $resetf | (read a ; echo $a)) || return
    case "$cmd" in
	reset)
	    logmsg "$(fmtcdate)" "%% Reset Monitored and Standby Network Status"
	    pstate=1
	    spstate=1
	    ;;
	dump)
	    logmsg "$(fmtcdate)" "%% pstate: $pstate  spstate: $spstate"
	    ;;
	*)
	    ;;
    esac   
    rm  -f $resetf
}
#
# Main
#
version="V1.9"
cdtfmt="+%Y-%m-%dT%H:%M:%S"  # Canonical date format for manipulation
dtfmt="+%Y-%m-%d %H:%M:%S"   # Date format for stdout output
dttw=10                      # Sleep time in seconds if network online
edttw=60                     # Sleep time intervals between external IP address checks [10 minutes]
curttw=$dttw
syslog=1                     # 1=log to stdout, 0=log to syslog
iplist=""                    # List of additional IP addresses to monitor
pingwait=1                   # Time to wait for a ping response
xip="1.1.1.1"                # Default Internet IP to ping
xstandby=""                  # --standby IP to also monitor
ddns=0                       # 1=Do External IP Address change checking
actscript=""                 # Action script 
myextip=$(getextip)          # Prime the pump
#myextip=""
noping=0                     # 0=also ping. 1=external IP monitor only
pingcount=0
pingct=""
pstate=1                     # External IP initial state
spstate=1                    # Hot standby initial state

script=$(basename $0)
cmdline="$0 $*"
OARGS=$(getopt -o h --longoptions help,action:,datefmt:,ddns,einterval:,internet:,interval:,noping,ping:,pingcount:,standby:,syslog -n $script -- "$@")
[ $? != 0 ] && echo "? ${script}: Command parse failed" && exit 1
eval set -- "$OARGS"

while true
do
    case "$1" in
	# 'shift 2' if switch has argument, else just 'shift'
	--action)      actscript=$2  ; shift 2 ;;
	--datefmt)     dtfmt=$2      ; shift 2 ;;
	--ddns)        ddns=1        ; shift 1 ;;
	--einterval)   edttw=$2      ; shift 2 ;;
	--internet)    xip=$2        ; shift 2 ;;
	--interval)    dttw=$2       ; shift 2 ;;
	--noping)      noping=1      ; shift ;;
	--ping)        iplist=$2     ; shift 2 ;;
	--pingcount)   pingct=$2     ; shift 2 ;;
	--pingwait)    pingwait=$2   ; shift 2 ;;
	--standby)     xstandby="$2" ; shift 2 ;;
	--syslog)      syslog=0      ; shift ;;
	--)            shift ; break ;;
	-h|--help)     echo "$script $version" ;
echo $"Usage:
$script [switches]
Monitor and report Internet up/down transitions

Switches
 --action script     Script to run for internet state changes/external IP changes/ping results
 --datefmt str       Use this date format w/stdout output [%Y-%m-%d %H:%M:%S]
 --ddns              Perform External IP Address change checking
                      If the External IP Address changes, call the action script
 --einterval waits   Number of --interval waits between External IP Address checks if --ddns [60]
 --internet ip       IP address to ping for testing [1.1.1.1]
 --interval seconds  Number of seconds between tests when online [10]
 --noping            Only monitor External IP Address, not internet up/down
 --ping ip           Comma-separated list of IP address to check when internet is down
                      or @file for a list of additional IPs to check
 --pingcount n       Do a ping test to --internet IP every --interval seconds
 --pingwait seconds  Wait this many seconds for ping response [1]
 --standby ip        A second IP to monitor for hot standby usage
 --syslog            Log output to syslog instead of stdout

Action script arguments
 Internet accessibility state changes: start|online|offline|ping datetime delta
  datetime: Event date/time in the canonical format +%Y-%m-%dT%H:%M:%S
  delta:    Time offline encoded as days:hours:minutes:seconds
  delta is only present if first argument is 'online'

 Dynamic DNS External IP Address change checking:
  update|noupdate new-external-ip old-external-ip
  update               Exernal IP Address has changed
  noupdate             Unable to retrieve External IP Address

 Ping result logging:
  ping datetime pingmin pingavg pingmax pingmdev loss% msec
  canonical-date-time: Date/time of ping in form %Y-%m-%dT%H:%M:%S
  pingmin:             Minimum ping time sampled
  pingavg:             Average ping time
  pingmax:             Maximum ping time sampled
  pingmdev:            Standard deviation (how far each ping rtt is from mean rtt)
  loss%:               % packet loss
  msec                 Time in msec for the ping"

shift ; exit ;;
	*) echo "? $0: Internal error" ; exit 1 ;;
    esac
done

tmp=$(($dttw))
[ $tmp -eq 0 ] && errexit "? Interval '$dttw' is incorrect"
[ -n "$actscript" ] && [ ! -x $actscript ] && errexit "? Action script '$actscript' not found or not executable"
[ $ddns -eq 1 -a -z "$actscript" ] && errexit "? --ddns requires --action"
[ "$xstandby" != "" -a -z "$actscript" ] && errexit "? --standby requires --action"
if [ -n "$pingct" ]
then
    pingcount=$(($pingct))
    [ $pingcount -eq 0 ] && errexit "? Ping count '$pingct' is incorrect"
    [ -z $actscript ] && errexit "? --pingcount requires --action"
fi
ips="$(getiplist $iplist)"
pinglist=()
[ "${ips:0:1}" == "?" ] && errexit "$ips" || read -r -a pinglist <<<$ips

#
# Print introductory information
#
logmsg "$(fmtcdate)" "Starting"
logmsg "$(fmtcdate)" "Command Line: $cmdline"
msg="Monitoring Internet IP $xip"
[ "${pinglist[0]}" != "" ] && msg="$msg and other IPs ${pinglist[*]}"
logmsg "$(fmtcdate)" "$msg"
[ "$myextip" != "" ] && msg="External IP Address $myextip" || msg="%% Unable to obtain initial external IP address...continuing"
logmsg "$(fmtcdate)" "$msg"
logmsg "$(fmtcdate)" "Action script: $actscript"
rm -f /tmp/internet-monitor-cmd
[ -n "$actscript" ]  && $actscript start $(getcdate) $syslog
if [ $ddns -eq 1 ]
then
    ewait=$((dttw*edttw))
    logmsg "$(fmtcdate)" "External IP check every $ewait seconds"
fi
online $xip && reportonline || reportoffline "starting "   # Also sets pstate and curttw appropriately
#
# Loop forever monitoring internet connectivity
#
if [ $noping -eq 1 ]
then
    #
    # Only monitoring External IP Address
    #
    while [ 1 ]
    do
	sleep $ewait
	checkextip
    done
else
    #
    # Monitor Internet Outages, External IP Address, and optionally ping times
    #
    el=0
    while [ 1 ]
    do
	checkactioncomm
	if online $xip
	then
	    # pstate=1 if previous state offline, report the change
	    [ $pstate -eq 1 ] && reportonline
	    if [ $pingcount -ne 0 ]
	    then
		#
		# Do a ping test against external IP and call action script with results
		#
		loss="" ms="" rtt="" xms="" min="" avg="" max="" mdev=""
		pingdate=$(getcdate)
		while read line
		do
		    if [[ "$line" =~ "transmitted" ]]
		    then
			read a b c d e loss f g h ms <<<$line
		    elif [[ "$line" =~ "min/avg/max/mdev" ]]
		    then
			read a b c rtt xms <<<$line
			IFS="/" read min avg max mdev <<<$rtt
		    fi
		done < <(ping -c $pingcount $xip)
		#
		# Call ping action script
		#
		[ "$loss" != "" ] && $actscript ping $pingdate $min $avg $max $mdev ${loss%%%} ${ms%%ms}
	    fi
	    if [ $(($el%$edttw)) -eq 0 ]
	    then
		el=0
		[ $ddns -eq 1 ] && checkextip
	    fi
	    el=$((el+1))
	else
	    [ $pstate -eq 0 ] && reportoffline ""
	fi
	if [ "$xstandby" != "" ]
	then
	    if online $xstandby
	    then
		if [ $spstate -eq 1 ]
		then
		    printmsg=$($actscript standby-online "$(getcdate)" $xstandby)
		    [[ "$printmsg" =~ "online" ]] && spstate=0
		fi
	    else
		if [ $spstate -eq 0 ]
		then
		    printmsg=$($actscript standby-offline "$(getcdate)" $xstandby)
		    [[ "$printmsg" =~ "offline" ]] && spstate=1
		fi
	    fi
	fi
	sleep $curttw
    done
fi
